// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  location   String
  species    Species
  action     Action
  gender     Gender
  age        Age
  desc       String
  size       String?
  color      String?
  price      Int?
  images     String[]
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  savedPosts SavedPost[]
  comments   Comment[]
}

enum Species {
  dog
  cat
  other
}

enum Action {
  adopt
  lost
  found
  help
  news
  sell
}

enum Gender {
  male
  female
  unknown
}

enum Age {
  puppy
  young
  adult
  old
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.ObjectId
  postId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  isAdmin    Boolean     @default(false)
  createdAt  DateTime    @default(now())
  posts      Post[]
  comments   Comment[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])
  chatIDs    String[]    @db.ObjectId
  messages   Message[]
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userIDs], references: [id])
  userIDs     String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  seenBy      String[]  @db.ObjectId
  messages    Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  user      User      @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  userId    String    @db.ObjectId
  post      Post      @relation(fields: [postId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  postId    String    @db.ObjectId
  likes     String[]
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children  Comment[] @relation("ParentChild")
  parentId  String?   @db.ObjectId
  createdAt DateTime  @default(now())
}
